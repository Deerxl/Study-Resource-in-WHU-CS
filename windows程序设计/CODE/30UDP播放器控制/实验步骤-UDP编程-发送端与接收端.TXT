实验目的
掌握具有窗体界面的UDP数据通信功能软件，掌握字节发送与处理方法，掌握自定义通信包构造方法。
通过网络通信机制，开发UDP发送端，UDP接收端，实现远程播放器远程控制软件。
实验过程
示例代码具有完整的代码与流程，学生可完全参考此代码内容编写程序。
对自己实验的程序进行调试，总结开发过程中问题。
以下是实验的主要具体代码步骤
发送端部分
1.新建windows窗体应用程序，参照示例设计窗体界面。
2.//动态链接库引入
        [DllImport("User32.dll", EntryPoint = "SendMessage")]
        private static extern int SendMessage(
        IntPtr hWnd, // handle to destination window 
        int Msg, // message 
        int wParam, // first message parameter 
        int lParam // second message parameter 
        ); 
3.全局变量定义
		public static Socket socket_send;
        public static IPEndPoint iep;
        public static EndPoint ep;

        public static byte[] send_data_buf;//设置缓冲数据流 
        public static int send_data_len;
        public static IPEndPoint RemoteIpEndPoint;
4.发送按钮事件处理代码
try
            {
                byte[] b_txt;// = Encoding.Default.GetBytes(DateTime.Now.ToString() +" "+ textBox2.Text);
                b_txt = Encoding.Default.GetBytes(textBox2.Text);
                send_data_len=b_txt.Length;
                Array.Copy(b_txt, send_data_buf, b_txt.Length);
                socket_send.SendTo(send_data_buf, send_data_len, SocketFlags.None, RemoteIpEndPoint); 
            }
            catch (Exception e2)
            {
                textBox1.Text = e2.Message;
            }
5.数据变量初始化
			send_data_buf = new byte[1024];
            socket_send = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);//初始化一个Scoket协议 
            socket_send.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.Broadcast, 1);//设置该scoket实例的发送形式
            //发送端
            RemoteIpEndPoint = new IPEndPoint(IPAddress.Broadcast, 9095);//初始化一个发送广播和指定端口的网络端口实例                       
以上为客户端代码
以下为服务端代码
1.构建窗体应用程序
2.全局变量定义
public static IntPtr main_wnd_handle; 
        //定义消息常数 
        public const int TRAN_UDP_IN = 0x500;
        public const int TRAN_SET_PROGRESS = 0x501;
3.//动态链接库引入
        [DllImport("User32.dll", EntryPoint = "SendMessage")]
        private static extern int SendMessage(
        IntPtr hWnd, // handle to destination window 
        int Msg, // message 
        int wParam, // first message parameter 
        int lParam // second message parameter 
        );
4.		//定义UDP的接收端数据变量
        public static Socket socket_recv;
        public static EndPoint remote_ep;   
        public static byte[] recv_data_buf;
        public static int recv_data_len;         
5.窗体消息重载函数
//窗体消息处理重载
            switch (m.Msg)
            {
                case TRAN_UDP_IN:
                    {
                        string recv_str = Encoding.Default.GetString(recv_data_buf, 0, recv_data_len);
                        switch(recv_str)
                        {
                            case "go":
                                {   
                                    axWindowsMediaPlayer1.Ctlcontrols.play();
                                    break;
                                }
                            case "pause":
                                {
                                    axWindowsMediaPlayer1.Ctlcontrols.pause();
                                    break;
                                }
                                
                        }
                        textBox1.Text += Encoding.Default.GetString(recv_data_buf, 0, recv_data_len)+"\r\n";
                        break;
                    }
                default:
                    base.DefWndProc(ref m);
                    break;
            }
6.启动UDP数据接收事件绑定
//生成一个对应端口的UDPClient，监听任意地址所发来的消息。
            //开始接收 
            Obj_one ob_1=new Obj_one();
            socket_recv.BeginReceiveFrom(recv_data_buf, 0, 1024, SocketFlags.None, ref remote_ep, ReceiveCallback, ob_1);        
7.//UDPClient异步接收到指令后的函数 
try
            {
                recv_data_len = socket_recv.EndReceiveFrom(ar, ref remote_ep);  
                SendMessage(main_wnd_handle, TRAN_UDP_IN, 100, 100);
                if (recv_data_len > 0)
                {
                    Obj_one ob_1 = new Obj_one();
                    socket_recv.BeginReceiveFrom(recv_data_buf, 0, 1024, SocketFlags.None, ref remote_ep, ReceiveCallback, ob_1);
                }
                else
                {
                    socket_recv.Close();
                }

            }
            // Store the exception message.
            catch (SocketException e)
            {
                MessageBox.Show(e.Message);    
            }                     
8.变量初始化
			recv_data_buf = new byte[1024];
            main_wnd_handle = this.Handle; 
            socket_recv = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);//初始化一个Scoket协议  
            //接收端
            remote_ep = new IPEndPoint(IPAddress.Any, 9095);//初始化一个侦听局域网内部所有IP和指定端口 
            
            IPEndPoint iep = new IPEndPoint(IPAddress.Any, 9095);//初始化一个发送广播和指定端口的网络端口实例
            socket_recv.Bind(iep);//绑定这个实例 

            //设置音乐文件路径
            axWindowsMediaPlayer1.URL = @"D:\09-10下\网络程序设计\11UDP通信\Canon.mp3";
            axWindowsMediaPlayer1.Ctlcontrols.stop();            
9.在窗体上加入Media Player控件
在toolbox上点右键，选择“选择项(Choose Items)”，切到COM页，找到 Windows Media Player， 勾选，确定 
在toolbox上，把刚才加入的MediaPlayer控件，拖放到Winform上 
实验调试与总结
1.运行自己编写的程序，同时运行发送端与接收端程序，调试通过。
2.分析和总结程序中的难点和记录自己解决过程。